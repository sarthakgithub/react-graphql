{"version":3,"sources":["components/LaunchItem.jsx","components/Launches.jsx","components/Launch.jsx","App.js","serviceWorker.js","index.js"],"names":["LaunchItem","launch","this","props","flight_number","mission_name","launch_date_local","launch_success","react_default","a","createElement","className","dist_default","format","react_router_dom","to","concat","React","Component","LAUNCHES_QUERY","gql","_templateObject","Launches","react_apollo_esm","query","_ref","loading","data","error","console","log","Fragment","launches","map","components_LaunchItem","key","LAUNCH_QUERY","Launch_templateObject","Launch","match","params","parseInt","variables","launch_year","_launch$rocket","rocket","rocket_id","rocket_name","rocket_type","client","ApolloClient","uri","App","react_router","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0255bea3.chunk.js","sourcesContent":["import React from 'react';\nimport Moment from 'react-moment';\nimport { Link } from 'react-router-dom';\n\nclass LaunchItem extends React.Component {\n  render() {\n    const { launch } = this.props;\n    const {\n      flight_number,\n      mission_name,\n      launch_date_local,\n      launch_success\n    } = launch;\n\n    return (\n      <div className=\"row\">\n        <div>\n          <h4>Mission : {mission_name} </h4>\n          <p>\n            Date: <Moment format=\"YYYY-MM-DD HH:mm\">{launch_date_local}</Moment>{' '}\n          </p>\n        </div>\n        <div>\n          <Link to={`/launch/${flight_number}`}>Launch Details</Link>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default LaunchItem;\n","import React from 'react';\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\nimport LaunchItem from './LaunchItem';\n\nconst LAUNCHES_QUERY = gql`\n  query LaunchesQuery {\n    launches {\n      flight_number\n      mission_name\n      launch_date_local\n      launch_success\n    }\n  }\n`;\nclass Launches extends React.Component {\n  render() {\n    return (\n      <div>\n        <h1>Launches</h1>\n        <Query query={LAUNCHES_QUERY}>\n          {({ loading, data, error }) => {\n            if (loading) {\n              return <h4>Loading...</h4>;\n            }\n            if (error) {\n              console.log('error', error);\n            }\n            return (\n              <React.Fragment>\n                {data &&\n                  data.launches.map(launch => {\n                    return (\n                      <LaunchItem key={launch.flight_number} launch={launch} />\n                    );\n                  })}\n              </React.Fragment>\n            );\n          }}\n        </Query>\n      </div>\n    );\n  }\n}\n\nexport default Launches;\n","import React from 'react';\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\nimport { Link } from 'react-router-dom';\n\nconst LAUNCH_QUERY = gql`\n  query LaunchQuery($flight_number: Int!) {\n    launch(flight_number : $flight_number) {\n      flight_number\n      mission_name\n      launch_year\n      launch_success\n      rocket {\n        rocket_id\n        rocket_name\n        rocket_type\n       }\n    }\n  }\n`;\n\nclass Launch extends React.Component {\n  render() {\n    let { flight_number } = this.props.match.params;\n    flight_number = parseInt(flight_number);\n\n    return (\n      <React.Fragment>\n        <Query query={LAUNCH_QUERY} variables={{ flight_number }}>\n          {({ loading, data, error }) => {\n            if (loading) return <h4>Loading</h4>;\n            if (error) console.log('error');\n            const { launch } = data;\n            const {\n              mission_name,\n              flight_number,\n              launch_year,\n              launch_success,\n              rocket: { rocket_id, rocket_name, rocket_type }\n            } = launch;\n\n            return (\n              <div>\n                <h1>\n                  <span>Mission:</span> {mission_name}\n                </h1>\n                <h4>Launch Details</h4>\n                <ul>\n                  <li>Launch Year: {launch_year}</li>\n                  <li>Launch Successful: {launch_success ? 'Yes' : 'No'}</li>\n                </ul>\n                <h4>Rocket Details</h4>\n                <ul>\n                  <li>Rocket Id: {rocket_id}</li>\n                  <li>Rocket Name: {rocket_name}</li>\n                  <li>Rocket Type: {rocket_type}</li>\n                </ul>\n                <Link to=\"/\">Back</Link>\n              </div>\n            );\n          }}\n        </Query>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default Launch;\n","import React from 'react';\nimport ApolloClient from 'apollo-boost';\nimport { ApolloProvider } from 'react-apollo';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport Launches from './components/Launches';\nimport Launch from './components/Launch';\nimport './App.css';\n\nconst client = new ApolloClient({\n  uri: '/graphql'\n});\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <Route exact path=\"/\" component={Launches} />\n        <Route exact path=\"/launch/:flight_number\" component={Launch} />\n      </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}